#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('brestoChatter:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// mongoDB操作モジュールの読み込み
var mongoose = require('mongoose');

// 受信側のSocketの用意
var io = require('socket.io').listen(server);

// 参加者
var users = {};
io.sockets.on('connection', function(socket) {
  // 接続idを確認
  console.log('connected', socket.id);

  // 部屋に参加
  socket.on('join', function(roomId, userName) {
    users[socket.id] = {
      roomId   : roomId,
      userName : userName
    };
    // roomIdのグループに登録する
    socket.join(users[socket.id].roomId);
    // roomIdのグループ全体に参加イベントを通知する
    io.to(users[socket.id].roomId).emit('join', users[socket.id].userName);
  });
  // 部屋から退出（接続が切れたとき）
  socket.on('disconnect', function() {
    // 接続情報が残っていたら
    // （再接続した時'join'イベントを投げないと接続情報が無い）
    if(users[socket.id]) {
      // 自分以外のroomIdグループの人に退出イベントを通知する
      socket.broadcast.to(users[socket.id].roomId).emit('leave', users[socket.id].userName);
      delete users[socket.id];
    }
    console.log('now connections:', users);
  });

  // chatというイベントを受信した時、送られた内容を全てのクライアントに送信する
  socket.on('chat', function(chat) {
    // 何らかが送られているなら登録する
    if(chat.message) {
      var newChat = new (mongoose.model('Chat'))();
      for(var key in chat) {
        newChat[key] = chat[key];
      }
      console.log(newChat);
      newChat.save();
      // 登録日を追加して全体に送る
      chat.createdDate = newChat.createdDate;
      io.emit('chat', chat);
    }
  });

  // 付箋作成イベントを受信した時
  socket.on('post-it-create', function(postIt) {
    var newPostIt = new (mongoose.model('PostIt'))();
    for(var key in postIt) {
      newPostIt[key] = postIt[key];
    }
    console.log(newPostIt);
    newPostIt.save();
    io.emit('post-it-create', newPostIt);
  });

  // 付箋移動イベントを受信した時
  socket.on('post-it-move', function(postItId, position) {
    mongoose.model('PostIt').findById(postItId, function(err, postIt) {
      postIt.position = position;
      postIt.save(function(err) {
        if(err) {
          console.log(err);
        }
        else {
          // 自分以外に付箋移動イベントを送る
          socket.broadcast.emit('post-it-move', postItId, position);
        }
      });
    });
  });

  // 付箋内容変更イベントを受信した時
  socket.on('post-it-contents-change', function(postItId, message) {
    mongoose.model('PostIt').findById(postItId, function(err, postIt) {
      postIt.message = message;
      postIt.save(function(err) {
        if(err) {
          console.log(err);
        }
        else {
          // 自分以外に付箋内容変更イベントを送る
          socket.broadcast.emit('post-it-contents-change', postItId, message);
        }
      });
    });
  });

  // 付箋削除イベントを受信した時
  socket.on('post-it-delete', function(postItIds) {
    mongoose.model('PostIt').remove({ _id: { $in: postItIds } }, function(err) {
      if(err) {
        console.log(err);
      }
      else {
        // 自分も含めて全員に付箋削除イベントを送る
        io.emit('post-it-delete', postItIds);
      }
    });
  });
});