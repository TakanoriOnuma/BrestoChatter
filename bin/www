#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('brestoChatter:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// mongoDB操作モジュールの読み込み
var mongoose = require('mongoose');

// 受信側のSocketの用意し、セッション情報を共有するように設定する
var io = require('socket.io').listen(server);
var sharedsession = require('express-socket.io-session');
io.use(sharedsession(app.session));

// 参加者
var members = {};
// 各部屋ごとのスケジュール状態
var meeting = {};
io.sockets.on('connection', function(socket) {
  // 接続idを確認
  console.log('connected', socket.id);
  // セッション情報を得る
  var user = socket.handshake.session.user;
  var room = socket.handshake.session.room;

  // 参加時の処理
  // 部屋に誰もいない時は配列を初期化する
  if(!members[room._id]) {
    console.log('room created:', room._id);
    members[room._id] = [];
    meeting[room._id] = {
      timerId : null,
      time    : 0
    }
  }

  // roomIdのメンバーに参加する
  user.position = { x: 0, y: 0 };
  members[room._id].push(user);
  socket.join(room._id);
  // 自分以外のroomIdのグループ全体に参加イベントを通知する
  socket.broadcast.to(room._id).emit('join', user);
  // 自分に対してはroomIdのグループで今参加しているメンバーと自分の情報を通知する
  socket.emit('members', members[room._id], user);

  // 部屋から退出（接続が切れたとき）
  socket.on('disconnect', function() {
    // 自分以外のroomIdグループの人に退出イベントを通知する
    socket.broadcast.to(room._id).emit('leave', user.userName);
    // 自分の情報を削除する
    for(var i = 0; i < members[room._id].length; i++) {
      if(members[room._id][i] === user) {
        members[room._id].splice(i, 1);
        break;
      }
    }
    // 参加者が誰もいなくなったら削除する
    if(members[room._id].length === 0) {
      delete members[room._id];
      // timerIdが残っていたら削除しておく
      if(meeting[room._id].timerId !== null) {
        clearInterval(meeting[room._id].timerId);
      }
      delete meeting[room._id];
    }
    console.log('now connections:', members);
  });

  // chatというイベントを受信した時、送られた内容を全てのクライアントに送信する
  socket.on('chat', function(message) {
    var newChat = new (mongoose.model('Chat'))();
    newChat.message = message;
    // 接続情報を元に必要項目を代入
    newChat.roomId   = room._id;
    newChat.userName = user.userName;
    console.log(newChat);
    newChat.save();
    // roomIdグループ全体にチャットイベントを通知する
    io.to(room._id).emit('chat', newChat);
  });

  // 付箋作成イベントを受信した時
  socket.on('post-it-create', function(postIt) {
    var newPostIt = new (mongoose.model('PostIt'))();
    newPostIt.roomId = room._id;
    for(var key in postIt) {
      newPostIt[key] = postIt[key];
    }
    console.log(newPostIt);
    newPostIt.save();
    io.to(room._id).emit('post-it-create', newPostIt);
  });

  // 付箋移動イベントを受信した時
  socket.on('post-its-move', function(postItIds, positions) {
    for(var i = 0; i < postItIds.length; i++) {
      mongoose.model('PostIt').findById(postItIds[i], function(err, postIt) {
        // 文字列化して添え字番号を調べる（非同期なためループ変数iが使えない）
        var idx = postItIds.indexOf('' + postIt._id);
        postIt.position = positions[idx];
        postIt.save(function(err) {
          if(err) {
            console.log(err);
          }
        });
      });
    }
    // 自分以外に付箋移動イベントを送る
    socket.broadcast.to(room._id).emit('post-its-move', postItIds, positions);
  });

  // 付箋内容変更イベントを受信した時
  socket.on('post-it-contents-change', function(postItId, message) {
    mongoose.model('PostIt').findById(postItId, function(err, postIt) {
      postIt.message = message;
      postIt.save(function(err) {
        if(err) {
          console.log(err);
        }
        else {
          // 自分以外に付箋内容変更イベントを送る
          socket.broadcast.to(room._id).emit('post-it-contents-change', postItId, message);
        }
      });
    });
  });

  // 付箋削除イベントを受信した時
  socket.on('post-it-delete', function(postItIds) {
    mongoose.model('PostIt').remove({ _id: { $in: postItIds } }, function(err) {
      if(err) {
        console.log(err);
      }
      else {
        // 自分も含めて全員に付箋削除イベントを送る
        io.to(room._id).emit('post-it-delete', postItIds);
      }
    });
  });

  // カーソル移動イベントを受信した時
  socket.on('cursor-move', function(userId, pos) {
    for(var i = 0; i < members[room._id].length; i++) {
      if(members[room._id][i]._id === userId) {
        members[room._id][i].position.x = pos.x;
        members[room._id][i].position.y = pos.y;
        break;
      }
    }
    // 自分以外にカーソル移動イベントを送信する
    socket.broadcast.to(room._id).emit('cursor-move', userId, pos);
  });

  // ミーティング停止処理
  var stopMeeting = function() {
    // 最初から始まってない時は何もしない
    if(meeting[room._id].timerId === null) {
      return;
    }

    clearInterval(meeting[room._id].timerId);
    meeting[room._id].timerId = null;

    // 自分も含めて全員に停止を伝える
    io.to(room._id).emit('meeting-stop');
  }
  // ミーティング開始処理
  var startMeeting = function() {
    // 既に始まっているときは何もしない
    if(meeting[room._id].timerId !== null) {
      return;
    }

    meeting[room._id].timerId = setInterval(function() {
      // 自分も含めて経過時間を送る
      meeting[room._id].time += 1;
      io.to(room._id).emit('meeting-count', meeting[room._id].time);

      // 10秒経ったら止める
      if(meeting[room._id].time >= 10) {
        stopMeeting();
        meeting[room._id].time = 0;
      }
    }, 1000);

    // 自分も含めて全員に開始を伝える
    io.to(room._id).emit('meeting-start', meeting[room._id].time);
  }
  // ミーティング開始イベントを受信した時
  socket.on('meeting-start', startMeeting);

  // ミーティング時間のON／OFF
  socket.on('meeting-toggle', function() {
    // timerIdが無いときは開始処理、ある時は停止処理を行う
    if(meeting[room._id].timerId === null) {
      startMeeting();
    }
    else {
      stopMeeting();
    }
  });
});